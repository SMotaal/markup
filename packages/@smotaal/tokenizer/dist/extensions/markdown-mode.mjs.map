{"version":3,"file":"markdown-mode.mjs","sources":["../../../packages/@smotaal/tokenizer/extensions/markdown/markdown-mode.js"],"sourcesContent":["import {previousTextFrom, indenter, Closures, sequence, all, raw} from '../helpers.js';\n\nexport const markdown = Object.defineProperties(\n  ({syntax} = defaults, {html}) => {\n    const EMBEDDED = true;\n    const matcher = ((...matchers) => {\n      let matcher = matchers[matchers.length - 1];\n      try {\n        matchers.push(\n          (matcher = sequence`${all(\n            sequence`(${markdown.WHITESPACE})`,\n            sequence`(${all(\n              markdown.ESCAPES,\n              markdown.ENTITIES,\n              markdown.RULES,\n              markdown.BLOCKS,\n              markdown.INLINES,\n              markdown.TYPOGRAPHS,\n              markdown.TAGS,\n              markdown.BRACKETS,\n              markdown.FENCES,\n              markdown.SPANS,\n            )})`,\n            markdown.INDICIES,\n            markdown.DECIMAL,\n            markdown.EXPONENTIAL,\n            markdown.FRAGMENTS,\n          )}${'/gim'}`),\n        );\n        return matcher;\n      } catch (exception) {\n        matchers.push(exception.message.replace(/.*Invalid regular expression: /, ''));\n        console.warn(exception);\n      }\n      matcher.matchers = matchers;\n      return matcher;\n    })(\n      /(^\\s+|\\n)|(&#x?[a-f0-9]+;|&[a-z]+;|(?:```+|\\~\\~\\~+|(?:--+|==+)(?=\\s*$)|(?:\\#{1,6}|\\-|\\b\\d+\\.|\\b[a-z]\\.|\\b[ivx]+\\.)(?=\\s+\\S*))|–|—|\"|'|=|\\/>|<%|%>|<!--|-->|<[\\/\\!]?(?=[a-z]+\\:?[a-z\\-]*[a-z]|[a-z]+)|<|>|\\(|\\)|\\[|\\]|__?|([*~`])\\3?\\b|(?:\\b|\\b\\B|\\B)([*~`])\\4?)|\\b[^\\n\\s\\[\\]\\(\\)\\<\\>&]*[^\\n\\s\\[\\]\\(\\)\\<\\>&_]\\b|[^\\n\\s\\[\\]\\(\\)\\<\\>&]+(?=__?\\b)|\\\\./gim,\n      sequence`(${markdown.WHITESPACE})|(${markdown.ENTITIES}|(?:${markdown.FENCES}|(?:${markdown.RULES})(?=\\s*$)|(?:${\n        markdown.BLOCKS\n      })(?=\\s+\\S*))|${markdown.TYPOGRAPHS}|${markdown.TAGS}|${markdown.BRACKETS}|${markdown.INLINES})|${\n        markdown.FRAGMENTS\n      }|${markdown.ESCAPES}${'/gim'}`,\n    );\n\n    const mode = {\n      syntax,\n      comments: Closures.from('<!--…-->'),\n      quotes: [],\n      closures: Closures.from(html.closures, markdown.CLOSURES),\n      operators: html.operators,\n      matcher: matcher,\n      spans: Closures.from('``…`` `…`'),\n      matchers: {comment: /(\\n)|(-->)/g},\n    };\n\n    const open = (parent, state, grouper) => {\n      const {source, index: start} = state;\n      const fence = parent.text;\n      const fencing = previousTextFrom(parent, '\\n');\n      const indenting = fencing.slice(fencing.indexOf('\\n') + 1, -fence.length) || '';\n      let end = source.indexOf(`\\n${fencing}`, start);\n      const INDENT = (indenting && indenter(indenting)) || /^/m;\n      const CLOSER = new RegExp(raw`^${INDENT.source.slice(1) || ''}${fence}`, 'mg');\n\n      CLOSER.lastIndex = start;\n      let closerMatch = CLOSER.exec(source);\n      if (closerMatch && closerMatch.index >= start) {\n        end = closerMatch.index;\n      } else {\n        const FENCE = new RegExp(raw`^[\\>\\|\\s]*${fence}`, 'mg');\n        FENCE.lastIndex = start;\n        const fenceMatch = FENCE.exec(source);\n        if (fenceMatch && fenceMatch.index >= start) {\n          end = fenceMatch.index;\n        } else return;\n      }\n\n      if (end > start) {\n        let offset = start;\n        let text, head, lines;\n\n        const body = source.slice(start, end) || '';\n        const tokens = [];\n        tokens.end = end;\n        if (!EMBEDDED) {\n          text = body;\n          tokens.push({text, type: 'code', offset, parent});\n          offset += body.length;\n        } else {\n          [head, ...lines] = body.split(/\\r?(\\n)\\r?/g);\n          if (head) {\n            tokens.push({text: head, type: 'comment', offset, parent}), (offset += head.length);\n          }\n          for (const line of lines) {\n            if (line === '\\n') {\n              text = line;\n              tokens.push({text, type: 'whitespace', offset, parent}), (offset += text.length);\n            } else {\n              const [indent] = INDENT.exec(line) || '';\n              const inset = (indent && indent.length) || 0;\n              if (inset) {\n                for (const text of indent.split(/(\\s+)/g)) {\n                  if (!text) continue;\n                  const type = (text.trim() && 'sequence') || 'whitespace';\n                  tokens.push({text, type, offset, parent});\n                  offset += text.length;\n                }\n                text = line.slice(inset) || '';\n              } else {\n                text = line;\n              }\n              if (text) {\n                tokens.push({text, type: 'code', offset, parent}), (offset += text.length);\n              }\n            }\n          }\n        }\n\n        if (tokens.length) {\n          const last = tokens[tokens.length - 1];\n          if (!last.text) tokens.pop();\n          return tokens;\n        }\n      }\n    };\n\n    {\n      const quotes = html.closures.get('<').quotes;\n      for (const opener of ['```', '~~~']) {\n        const FenceClosure = mode.closures.get(opener);\n        if (FenceClosure) {\n          FenceClosure.matcher = new RegExp(\n            raw`/(\\s*\\n)|(${opener}(?=\\s|$)|^(?:[\\s>|]*\\s)?\\s*)|.*$`,\n            'gm',\n          );\n          FenceClosure.quotes = quotes;\n          FenceClosure.open = open;\n        }\n      }\n    }\n\n    return mode;\n  },\n  {\n    defaults: {get: () => ({...markdown.DEFAULTS})},\n  },\n);\n\nDefinitions: {\n  Defaults: {\n    markdown.DEFAULTS = {syntax: 'markdown', aliases: ['md'], requires: ['html']};\n  }\n\n  markdown.BLOCK = '```…``` ~~~…~~~';\n  markdown.INLINE = '[…] (…) *…* **…** _…_ __…__ ~…~ ~~…~~';\n  markdown.CLOSURES = `${markdown.BLOCK} ${markdown.INLINE}`;\n  markdown.WHITESPACE = /^\\s+|\\s+$|\\n/;\n  markdown.ESCAPES = /\\\\./;\n  markdown.ENTITIES = /&#x?[a-f0-9]+;|&[a-z]+;/;\n  markdown.FENCES = /(?:\\x60{3,}|\\x7E{3,})(?=\\b| |$)/;\n  markdown.RULES = /(?:[\\-]{2,}|[=]{2,})(?=\\s*$)/;\n  markdown.BLOCKS = /(?:\\#{1,6}|\\-|\\b\\d+\\.|\\b[a-z]\\.|\\b[ivx]+\\.)(?=\\s+\\S)/;\n  markdown.TYPOGRAPHS = /\\B[–—](?=\\ )|\"|'|=/;\n  markdown.TAGS = /\\/>|<%|%>|<!--|-->|<[\\/\\!]?(?=[a-z]+\\:?[a-z\\-]*[a-z]|[a-z]+)/;\n  markdown.BRACKETS = /<|>|\\(|\\)|\\[|\\]/;\n  markdown.INLINES = /\\b([*~_])(?:\\3\\b(?=[^\\n]*[^\\n\\s\\\\]\\3\\3)|\\b(?=[^\\n]*[^\\n\\s\\\\]\\3))|(?:\\b|\\b\\B|\\B)([*~_])\\4?/;\n  markdown.SPANS = /(``?(?![`\\n]))[^\\n]*?[^\\\\`\\n]\\5/;\n  markdown.INDICIES = /\\b(?:[\\da-zA-Z]+\\.)+[\\da-zA-Z]+\\.?/;\n  markdown.DECIMAL = /[+\\-]?\\d+(?:,\\d{3})*(?:\\.\\d+)?|[+\\-]?\\d*\\.\\d+/;\n  markdown.EXPONENTIAL = /\\d+[eE]\\-?\\d+|\\d+\\.\\d+[eE]\\-?\\d+/;\n  markdown.FRAGMENTS = /\\b[^\\n\\s\\[\\]\\(\\)\\<\\>&`\"]*[^\\n\\s\\[\\]\\(\\)\\<\\>&_`\"]\\b|[^\\n\\s\\[\\]\\(\\)\\<\\>&`\"]+(?=__?\\b)/;\n}\n"],"names":[],"mappings":"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"}